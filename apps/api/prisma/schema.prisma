datasource db {
  url      = env("DATABASE_URL")
  provider = "postgres"
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  email         String  @unique
  image         String?
  tokenVersion  Int     @default(0)
  emailVerified Boolean @default(false)
  provider      String?

  FeedbacksAuthored   Feedback[]
  Activity            Activity[]
  VerificationToken   Token?          @relation("VerifyAccountToken")
  ForgotPasswordToken Token[]         @relation("ForgotPasswordToken")
  StudentOutputs      StudentOutput[]
}

enum TokenType {
  VerifyAccount
  ChangePasswordRequest
}

model Token {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  type  TokenType
  token String    @unique

  verifiedAccountOf String @unique
  forgotPasswordBy  String

  userVerify         User @relation("VerifyAccountToken", fields: [verifiedAccountOf], references: [id])
  userForgotPassword User @relation("ForgotPasswordToken", fields: [forgotPasswordBy], references: [id])

  @@unique([id, token])
}

enum ActivityStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Activity {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  status      ActivityStatus @default(DRAFT)
  topics      Int[]

  contents  ActivityContent[]
  questions Question[]
  outputs   StudentOutput[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model Choice {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text    String
  comment String
  label   String

  Question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
}

enum QuestionType {
  MULTIPLECHOICE
  TEXT
}

model Question {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text      String
  choices   Choice[]
  answerKey String? //label of choice or free text
  type      QuestionType

  answers    OutputAnswer[]
  Activity   Activity?      @relation(fields: [activityId], references: [id])
  activityId Int?
}

enum ContentType {
  VIDEO
  IMAGE
  AUDIO
  TEXT
}

model ActivityContent {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type ContentType

  content String // url ou texto
  title   String?

  Activity   Activity? @relation(fields: [activityId], references: [id])
  activityId Int?
}

model StudentOutput {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  answers OutputAnswer[]

  Activity   Activity? @relation(fields: [activityId], references: [id])
  activityId Int?
}

model OutputAnswer {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  StudentOutput   StudentOutput? @relation(fields: [studentOutputId], references: [id])
  studentOutputId Int?
  Question        Question?      @relation(fields: [questionId], references: [id])
  questionId      Int?
  feedback        Feedback?
}

model Feedback {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text  String
  emoji String?

  OutputAnswer   OutputAnswer @relation(fields: [outputAnswerId], references: [id])
  outputAnswerId Int          @unique
  User           User?        @relation(fields: [authoredBy], references: [id])
  authoredBy     String?
}
